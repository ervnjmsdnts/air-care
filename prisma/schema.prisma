generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id           String         @id @unique @default(cuid())
  name         String
  phoneNumber  String
  address      String
  email        String         @unique
  password     String
  role         Role           @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Audit        Audit[]
  Appointment  Appointment[]
  Notification Notification[]
}

model Audit {
  id        String   @id @unique @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
}

model Inventory {
  id           String        @id @unique @default(cuid())
  name         String
  key          String?
  url          String?
  quantity     Int           @default(0)
  brand        String
  type         String
  installPrice Float
  repairPrice  Float
  buyPrice     Float
  cleanPrice   Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Appointment  Appointment[]
}

enum AppointmentType {
  INSTALLATION
  REPAIR
  PURCHASE
  CLEANING
}

enum AppointmentStatus {
  PENDING
  APPROVED
  DENIED
  ONGOING
  DONE
}

model Appointment {
  id            String            @id @unique @default(cuid())
  user          User              @relation(fields: [userId], references: [id])
  product       Inventory         @relation(fields: [productId], references: [id])
  userId        String
  productId     String
  price         Float
  quantity      Int?
  type          AppointmentType
  status        AppointmentStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  scheduledDate DateTime?
  Notification  Notification[]
}

enum NotificationType {
  ARCHIVED
  NEW
}

model Notification {
  id            String           @id @unique @default(cuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  appointment   Appointment      @relation(fields: [appointmentId], references: [id])
  appointmentId String
  message       String
  type          NotificationType @default(NEW)
  createdAt     DateTime         @default(now())
}

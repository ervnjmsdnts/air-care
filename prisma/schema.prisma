generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String           @id @unique @default(cuid())
  name           String
  phoneNumber    String
  address        String
  email          String           @unique
  password       String
  isVerified     Boolean          @default(false)
  role           Role             @default(USER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Audit          Audit[]
  Appointment    Appointment[]
  Notification   Notification[]
  SpecialRequest SpecialRequest[]
}

model Audit {
  id        String   @id @unique @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
}

model Inventory {
  id           String        @id @unique @default(cuid())
  name         String
  key          String?
  url          String?
  quantity     Int           @default(0)
  brand        String
  type         String
  installPrice Float
  repairPrice  Float
  buyPrice     Float
  cleanPrice   Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Appointment  Appointment[]
}

enum AppointmentType {
  INSTALLATION
  REPAIR
  PURCHASE
  CLEANING
}

enum AppointmentStatus {
  PENDING
  APPROVED
  DENIED
  ONGOING
  DONE
}

enum AppointmentHours {
  MORNING
  AFTERNOON
}

model Appointment {
  id             String            @id @unique @default(cuid())
  user           User?             @relation(fields: [userId], references: [id])
  product        Inventory         @relation(fields: [productId], references: [id])
  isManual       Boolean           @default(false)
  name           String?
  address        String?
  contactNumber  String?
  email          String?
  userId         String?
  productId      String
  price          Float
  quantity       Int?
  type           AppointmentType
  status         AppointmentStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  scheduledDate  DateTime?
  isWarrantyUsed Boolean           @default(false)
  hours          AppointmentHours?
  Notification   Notification[]
  receipt        Receipt?
}

enum PaymentType {
  CASH
  CHEQUE
}

model Receipt {
  id            String      @id @unique @default(uuid())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String      @unique
  paymentType   PaymentType
  receiptNumber Int
  receivedFrom  String
  amount        Float
  for           String
  paymentAmount Float
  receivedBy    String
  key           String?
  url           String?
  createdAt     DateTime    @default(now())
}

enum NotificationType {
  ARCHIVED
  NEW
}

model Notification {
  id            String           @id @unique @default(cuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  appointment   Appointment?     @relation(fields: [appointmentId], references: [id])
  message       String
  isAppointment Boolean          @default(true)
  type          NotificationType @default(NEW)
  createdAt     DateTime         @default(now())
  appointmentId String?
}

model AdminNotification {
  id        String           @id @unique @default(cuid())
  message   String
  type      NotificationType @default(NEW)
  createdAt DateTime         @default(now())
}

enum SpecialRequestStatus {
  PENDING
  APPROVED
  DENIED
  DONE
}

model SpecialRequest {
  id          String               @id @unique @default(cuid())
  user        User                 @relation(fields: [userId], references: [id])
  brand       String
  model       String
  description String
  url         String?
  key         String?
  userId      String
  createdAt   DateTime             @default(now())
  status      SpecialRequestStatus @default(PENDING)
}
